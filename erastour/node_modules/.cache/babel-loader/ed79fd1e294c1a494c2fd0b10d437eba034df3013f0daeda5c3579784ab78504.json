{"ast":null,"code":"var _jsxFileName = \"/Users/harshithadhulipala/Desktop/ErasTour/erastour/src/map.js\";\nimport React from 'react';\nimport geojson from './geojson.json';\nimport { geoMercator, geoPath } from 'd3-geo';\nimport { select } from 'd3-selection';\n\n// Define a new component for the single state map\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SingleStateMap extends React.Component {\n  render() {\n    // Use the data of the selected state to render the details\n    const {\n      selectedState\n    } = this.props;\n\n    // You can render the details here using the selectedState data\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: selectedState.properties.NAME\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.onClose,\n        children: \"X\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    // Function to handle the state selection\n    this.handleStateClick = state => {\n      this.setState({\n        selectedState: state\n      });\n    };\n    // Function to handle closing the single state map\n    this.handleMapClose = () => {\n      this.setState({\n        selectedState: null\n      });\n    };\n    this.state = {\n      selectedState: null\n    };\n  }\n  render() {\n    const {\n      selectedState\n    } = this.state;\n    const filteredFeatures = geojson.features.filter(feature => feature.properties.NAME !== 'Alaska' && feature.properties.NAME !== 'Hawaii' && feature.properties.NAME !== 'Puerto Rico');\n    const width = 1000;\n    const height = width * 0.7;\n    const projection = geoMercator().fitSize([width, height], {\n      type: 'FeatureCollection',\n      features: filteredFeatures\n    });\n    const path = geoPath().projection(projection);\n    const svgStyle = {\n      display: 'block',\n      margin: 'auto'\n    };\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh'\n      },\n      children: selectedState ?\n      /*#__PURE__*/\n      // Render the single state map component if a state is selected\n      _jsxDEV(SingleStateMap, {\n        selectedState: selectedState,\n        onClose: this.handleMapClose\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"svg\", {\n        width: width,\n        height: height,\n        style: svgStyle,\n        children: /*#__PURE__*/_jsxDEV(\"g\", {\n          className: \"geojson-layer\",\n          children: filteredFeatures.map(d => /*#__PURE__*/_jsxDEV(\"path\", {\n            d: path(d),\n            fill: \"#eee\",\n            stroke: \"#0e1724\",\n            strokeWidth: \"1\",\n            strokeOpacity: \"0.5\",\n            onClick: () => this.handleStateClick(d),\n            onMouseEnter: e => {\n              select(e.target).attr('fill', '#000');\n            },\n            onMouseOut: e => {\n              select(e.target).attr('fill', '#eee');\n            }\n          }, d.properties.NAME, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","geojson","geoMercator","geoPath","select","jsxDEV","_jsxDEV","SingleStateMap","Component","render","selectedState","props","children","properties","NAME","fileName","_jsxFileName","lineNumber","columnNumber","onClick","onClose","Map","constructor","handleStateClick","state","setState","handleMapClose","filteredFeatures","features","filter","feature","width","height","projection","fitSize","type","path","svgStyle","display","margin","style","justifyContent","alignItems","className","map","d","fill","stroke","strokeWidth","strokeOpacity","onMouseEnter","e","target","attr","onMouseOut"],"sources":["/Users/harshithadhulipala/Desktop/ErasTour/erastour/src/map.js"],"sourcesContent":["import React from 'react';\nimport geojson from './geojson.json';\nimport { geoMercator, geoPath } from 'd3-geo';\nimport { select } from 'd3-selection';\n\n// Define a new component for the single state map\nclass SingleStateMap extends React.Component {\n  render() {\n    // Use the data of the selected state to render the details\n    const { selectedState } = this.props;\n\n    // You can render the details here using the selectedState data\n\n    return (\n      <div>\n        {/* Add your single state map details here */}\n        <h1>{selectedState.properties.NAME}</h1>\n\n        {/* Add a button to close the single state map and return to the main map */}\n        <button onClick={this.props.onClose}>X</button>\n      </div>\n    );\n  }\n}\n\nexport default class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedState: null,\n    };\n  }\n\n  // Function to handle the state selection\n  handleStateClick = (state) => {\n    this.setState({ selectedState: state });\n  };\n\n  // Function to handle closing the single state map\n  handleMapClose = () => {\n    this.setState({ selectedState: null });\n  };\n\n  render() {\n    const { selectedState } = this.state;\n\n    const filteredFeatures = geojson.features.filter(\n      (feature) =>\n        feature.properties.NAME !== 'Alaska' &&\n        feature.properties.NAME !== 'Hawaii' &&\n        feature.properties.NAME !== 'Puerto Rico'\n    );\n\n    const width = 1000;\n    const height = width * 0.7;\n    const projection = geoMercator().fitSize([width, height], {\n      type: 'FeatureCollection',\n      features: filteredFeatures,\n    });\n    const path = geoPath().projection(projection);\n\n    const svgStyle = {\n      display: 'block',\n      margin: 'auto',\n    };\n\n    return (\n      <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>\n        {selectedState ? (\n          // Render the single state map component if a state is selected\n          <SingleStateMap selectedState={selectedState} onClose={this.handleMapClose} />\n        ) : (\n          <svg width={width} height={height} style={svgStyle}>\n            <g className=\"geojson-layer\">\n              {filteredFeatures.map((d) => (\n                <path\n                  key={d.properties.NAME}\n                  d={path(d)}\n                  fill=\"#eee\"\n                  stroke=\"#0e1724\"\n                  strokeWidth=\"1\"\n                  strokeOpacity=\"0.5\"\n                  onClick={() => this.handleStateClick(d)}\n                  onMouseEnter={(e) => {\n                    select(e.target).attr('fill', '#000');\n                  }}\n                  onMouseOut={(e) => {\n                    select(e.target).attr('fill', '#eee');\n                  }}\n                />\n              ))}\n            </g>\n          </svg>\n        )}\n      </div>\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}